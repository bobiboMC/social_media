generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  email       String        @unique
  id          String        @id @db.Uuid
  UserSession UserSession[]
  UserInfo    UserInfo[]
  Post        Post[]
  Comment     Comment[]
  Like        Like[]

  @@map("users")
}

model UserSession {
  id        String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid

  isActive Boolean   @default(false)
  closedAt DateTime?
}

model UserInfo {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  gender    String
  biography String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model Post {
  id          Int      @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  title       String
  description String

  user    User      @relation(fields: [userId], references: [id])
  userId  String    @db.Uuid
  Comment Comment[]
  Like    Like[]

  @@id([userId, id])
  @@unique([id])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}
